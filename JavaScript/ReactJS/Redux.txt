
Ques: Redux...
	It needs 4 things
		1. reducer //normal js function which takes 2 arg state and action and returns state also contains initial state of the app
		2. store   //createStore
		3. subscription  //connect
		4. dispatchingAction

yarn add redux //3rd part redux
yarn add react-redux //redux with react support


Ques: connect store with our react app?
	need special package react-redux
	import Provider from this package
	Provider 
	//help to inject store into the react applictaion
	//need props store
	ReactDOM.render(<Provider store={store}> <App/></Provider>, document.getElementById('root'));

Ques: Subscribe in react
	Subscribe in react is implemented by 'connect' from 'react-redux'
	
	export default connect(mapStateToProps,mapDispatchToProps)(Counter);
	connect is a fucntion which return a HOC
	connect(arg1,arg2) //arg1 : mapStateToProps arg2:dispatch object

Ques: mapStateProps // is a store state provided by the react we pass it to the connect whic gives the updated state if any action is executed
	const mapStateToProps = (state) => {     //depicting what we want from the stored state
							return {
								ctr:state.ctr.counter,
								resultsList:state.res.results
							}
	}


Ques: mapDispatchToProps
    Dispatch action in react app...
	
	const mapDispatchToProps = (dispatch) => {
		return {
			onIncrementCounter: () => dispatch(actionCreator.increment()),
			onDecrementCounter: ()=> dispatch(actionCreator.decrement()),
			onAddCounter: ()=> dispatch(actionCreator.add(5)),
			onSubtracttCounter: ()=> dispatch(actionCreator.subtract(5)),
			onSubmitResult:(currentCounter)=> dispatch(actionCreator.submitResult(currentCounter)),
			onDeleteResult:(id)=> dispatch(actionCreator.deleteResult(id)),
		}
	}

pass this mapDispatchToProps dispatch const to connect method second arg


Ques: combineReducer //to combine diff reducer
		const rootReducer = combineReducers({
			ctr : counterReducer,
			res : resultReducer
		});

Ques: Create STore?
const store = createStore(rootReducer , composeWithDevProviderTools(applyMiddleware(logger,thunk)));


Middleware .....
It gives inside of our store but only we dispatch any action
act as middle person between action dispatcher and reducer

const logger = store => {
    return next => {
        return action => {    //it is simple middleware
            console.log('[Middleware] Dispatching',action);
            const result = next(action);   // now redux takes these action to reducer
            //this is the middleware part
            console.log('[Middleware] next state',store.getState());
            return result;
        }
    }
}

const store = createStore(rootReducer , applyMiddleware(logger));

applyMiddleware(middleware1,middleware2....) can pass any no of middleware.... which executed sequentially

yarn add redux-devtools-extension //to install redux extension

react compose -> allows us to combine enhancer

react combineReducer -> allows us to combine reducer

redux thunk  
It is use to handle asynchronous call in react redux application

Redux Thunk is a middleware that lets you call action creators that return a function instead of an action object.
 That function receives the store's dispatch method, which is then used to dispatch regular synchronous actions inside 
 the function's body once the asynchronous operations have been completed.

action creators....
const submitResult = (res) => { //it is Action Creators
    return (dispatch) => {

        setTimeout(()=> dispatch(saveResult(res)),2000); //it will be dispatched by middleware redux thunk
        
    }
}


Redux thunk getState....
to get state in the asychronous redux thunk action creator 
