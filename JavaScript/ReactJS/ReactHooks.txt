React hooks are not related to Lifecycle hooks

introduced hooks in react 16  (I used 16.8)

React.memo //changes only when props changes not depends on if parent changes

React Hooks Rules:
You must use it on the root level only
u cant use hooks in nested function
not allowed in if statement

msg = String Interpolation
String Interpolation `hello this is ${msg} `



..............useState()..............
useState has two component current state , set state method
const [enteredTitle, setEnteredTitle] = useState('');



..............useEfffect()..............
sideEffect -> it is something for ex an http call which effect our applictaion .
ex fetching data after u update your component


useEfffect(()=>{
//body
},[//limit]) // executed after every component render cycle done similiar to componentDidUpdate

To stop infinite useeffect calling solution add empty array in useEffect

if you use setState in useEffect it will go in loop you can c that in network tab so u have give it the limit in array which is second arg([])



add this rules in firebase to filter by title
"ingredients":{
        ".indexOn":["title"]
      }


useEffect(()=>{

const s = ()=>{};   //useEffect Business Logic
return ()=>{}  //useEffect can return something which can only be function //clean up code

},[dependencie]);



useEffect can also to be used to reset authentication token for the logged in user
useEffect is used for cleanupactivities //ex reset setTimeout 
useEffect is use to fetch search item you typed in input



..............useCallback()..............

useCallback(()=>{} ,[dependencies])  // It cache the function and do not execute when page reloads or component mounted again
useCallback is used to memoize functions



..............useReducer()..............
It is use when ur state depends on prevstate or very complex state or various operation like add set delete
Note: It has no connection to react redux

const [userIngredients, dispatch] =  useReducer(ingredientReducer,[]);    //(first arg is the handler funct , second arg is an initial state)
dispatch is a function in which u can trigger your action
ex
dispatchHttp({type : 'ERROR',errorMessage:"Something went wrong"});

React will re render the component whenever your reducer returns the new state




..............useContext()..............
It is used for getting context object in the application
ex: const authContext = useContext(AuthContext);

To create context object...
export const AuthContext = React.createContext({
    isAuth:false,
    login:()=>{}
});

Steps to create context in application
1. Create context using React.createContext()
2. wrapp App to AuthContext.Provider
3. In any component access context using useCOntext();
4. Perform whatever operation u want to operate it will directly change into ContextObject

..............useMemo()..............

useCallback is use to memoize function whereas useMemo(func,[]) is used for memoize data
 
 ex: useMemo(()=>{
    return(<IngredientList ingredients={userIngredients} onRemoveItem={(id)=>{onRemoveItemHandler(id)}} />);
  },[userIngredients]
  );
  
see Video Udemy 447 to learn to increase efficiency and reduce rerender cycle or increase performance

..............useRef()..............

const inputRef = useRef(); // strating of the component

<input ref={inputRef} type="text" value={enteredFilter} onChange={event=>handleSearch(event)}/>




react hooks
useState , useEffect ,useContext , useRef ,useReducer,useMemo

state , ,createContext , createRef ,'' , React.memo()

