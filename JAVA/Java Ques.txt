
Ques: Java version u used ?
1.8
Ques: What version of JUnit you are using ?
version using junit4


...........OOPS...................
Ques 1 : What is Automatic Promotion in Java Overloading?

Ques 2 : When to use has a and is a functionality in java?

Ques 3 : Differnce between upcasting(Parent p = new Child();right) and downcasting( Child c = new Parent;wrong) ? 

Ques 4 : What is covariance in java? is it applicable to primitive type?
covariant return type- if parent mathod return Object then when u override this method u have to return either Object or its child type.
Only for object type not for primitive type

Ques 5 : Can we override private method and final mehod?

Ques 6 : What is difference between Object Based or Object-Oriented prog languages?

Ques 7 : How to Call Garbage Collector?    //System.gc(); and garbage collector calls finalize() to clean up object resources before destroying

Ques 8 : When method resolution took place in Overloading and Overriding?
Overloading
	-decision of which method to be called is resolved at compile time
	-only by compiler.

Overriding
	-it is done on runtime by jvm.
	
Ques: Piilars of oops?
Data Hiding
Abstraction
Encapsulation
Inheritence
Polymorphism


Ques: Advantage of HAS A relationships? The main advantage of HAS-A relationship is flexibility & reusability	
Ques: Advantage of IS A (inheritence) relationship? Reusibility


............String................
Ques : What happen if you pass string as parameter to method which changes the string?
Refer -> https://theopentutorials.com/tutorials/java/strings/passing-string-as-parameter-to-a-method/

Ques : String s1 = "geeksquiz";
       String s2 = "geeksquiz";
       System.out.println("s1 == s2 is:" + s1 == s2);  //+ is more precednce than == o/p is calculated "s1 == s2 is: + geeksquiz" == "geeksquiz"
       which is false.
        
Ques : System.out.println(10  +  20 + "GeeksQuiz");  //30GeeksQuiz
       System.out.println("GeeksQuiz" + 10 + 20);   //GeeksQuiz1020
       
Ques : String intern() method //returns string from SCP
Strin s1="abc";
String s2=s1.intern(); //"abc"

Ques : trim() vs strip() ?
Both are used to remove leading and trailing whitespaces.

strip() method  
It was added to the String class in Java 11. However, the strip() method uses Character.isWhitespace() method to check if the character is a whitespace.
 This method uses Unicode code points.
whereas the trim() method identifies any character having codepoint value less than or equal to ‘U+0020’ as a whitespace character.

Ques : which is recommended ? 
The strip() method is the recommended way to remove whitespaces because it uses the Unicode standard.

Ques: StringBuffer ensureCapacity() ?
increase the capacity of String buffer(old+new = new capacity)

Ques: str.substrng(i,j)?
 gives string start from i to j-1 
 
Ques: What is the diff b/w String s="sam" & String s = new String("sam");
When you use a string literal the string can be interned,
 but when you use a new String("...") you get a new string object.
 In general, you should use the string literal notation when possible. It is easier to read and it gives the compiler a chance to optimize your code.

Ques: String vs StringBuffer vs StringBuilder :
1. If the content is fixed and won't change frequently then we should go for String.   //it is comparable
2. If the content will change frequently but Thread safety is required then we          //it is notcomparable 
should go for StringBuffer.
3. If the content will change frequently and Thread safety is not required then we      //
should go for StringBuilder

QUes: Why Strings are immutable?
In the String constant pool, a String object is likely to have one or many references. If several references point to the same String without even knowing it,
 it would be bad if one of the references modified that String value. That's why String objects are immutable

............... Topic: Threading & Multithreading.................
pending-> 
create ProducerConsumer Prom=blem and wait notify code in eclipse
create and learn BlockingQueue 

Ques 1:What start() method does? //instantiate,register thread to ThreadSchedular

Ques 2:What is Thread Scheduler?  // allocates CPU

Ques 3:Does run method of thread class can have arguments?  //public void run(){}  but callable has

Ques 4:Which method is useful to create Thread, extending thread or implementing runnable interface?   //implementing runnable

Ques 5:Thread Deadlock startegy?   //Thread.currentThread().join() or put join on each other thread

Ques 6: How Synchronized Block is better approach then Synchronised Method? 
// The main advantage of synchronized block over synchronized method is it reduces waiting time of Thread and improves performance of the system

Ques 7:Draw Full Thread Life cycle?

Ques: Does thread share heap or addressspace or callstack?
same heap or addrssspace but
diferent callstack

Ques: How to stop thread?
thread interrupt method.   //Note: stop suspend resume is deprecated methods

Ques: What are Green Thread?
Green threads are created and scheduled by Virtual machine without using OS libraries
It is not used as of now
Green thread are made where kernel doesn't provide supoort for multithreading.


Ques : why wait,notify,notifyall present in object class if it is specific to thread.why not it in thread class?
coz thread applies lock on these methods on objects 
ex: locking concept

Ques: What is diff b/w class level lock and object level lock?
https://www.tutorialspoint.com/difference-between-object-level-lock-and-class-level-lock-in-java#:~:text=Object%20Level%20Locks%20%E2%88%92%20It%20can,all%20available%20instances%20on%20runtime.

Ques: Thread uses what scheduling?
Premptive - high priority executes first      //in time slicing thread exexutes for some time and go in ready state again

Ques: Semaphores in Java?
A semaphore controls access to a shared resource through the use of a counter.
 If the counter is greater than zero, then access is allowed. If it is zero, 
then access is denied to access the resource, a thread must be granted a permit from the semaphore.
We can use a semaphore to lock access to a resource, each thread that wants to use that resource must first call acquire( ) before accessing the resource to
acquire the lock. When the thread is done with the resource, it must call release( ) to release lock.

More On Semaphores - https://www.geeksforgeeks.org/semaphore-in-java/

Que: If you have one thread printing even number anotherthread printing odd number how can u print 1,2,3,4,5.....?
Using wait notify concept
https://www.geeksforgeeks.org/print-even-and-odd-numbers-in-increasing-order-using-two-threads-in-java/

--------
Ques: Thread Pool?
It is a group of worker threads that are waiting for the job and reuse many times.
Advantage //no need to create thread i.e no need to focus on creating threads and saves time

Ex: Tomcat container uses thread pool
https://www.javatpoint.com/java-thread-pool

Ques: Create Executor service using factory methods of the Executors class?

ExecutorService executor = Executors.newFixedThreadPool(10);			//creating a pool of 5 threads  
for (int i = 0; i < 10; i++) {  
            Runnable worker = new WorkerThread("" + i);  
            executor.execute(worker);						//calling execute method of ExecutorService  
}  
executor.shutdown(); 

Reference : https://www.baeldung.com/java-executor-service-tutorial

Ques: How to make sure all threads in executor is executed or not?
we can shut down Executor by calling the shutdown() or shutdownNow() methods But Waiting for existing threads to complete their execution can be achieved
 by using the awaitTermination() method.

or just wait for other thread to execute.

    try {
        if (!threadPool.awaitTermination(60, TimeUnit.SECONDS)) {
            threadPool.shutdownNow();
        }
    } catch (InterruptedException ex) {
        threadPool.shutdownNow();
        Thread.currentThread().interrupt();
    }

Ques: To create custom Threads Pool?
ForkJoinPool customThreadPool = new ForkJoinPool(4);

Study ForkJoinPool
In short, the main difference between the Executor framework and ForkJoinPool is that the former provides a general-purpose thread pool,
 while the latter provides a special implementation that uses a work-stealing pattern for efficient processing of ForkJoinTask.
https://www.javatpoint.com/java-forkjoinpool
------------------------
...Runtime
Ques : How will you invoke any external process in Java?     //to perform native operation of platform
Runtime.getRuntime().exec("notepad");//will open a new notepad  
Note: to learn full force of Runtime refer = https://www.javatpoint.com/java-runtime-class

Ques : What is shutdown hook?   //The shutdown hook is a thread that is invoked implicitly before JVM shuts down
Runtime r=Runtime.getRuntime();   
r.addShutdownHook(new MyThread());    // registershutdownhook is used as addshutdownhook on The IOC container
Use:To notify user that program is completed or if u want to do some task after method completed (for ex cleanup activities)
 
Ques: Thread Group in java?
ThreadGroup represents a set of threads.
A thread group can also include the other thread group
Advantage - we can suspend, resume or interrupt group of threads by a single method call.

ThreadGroup tg1 = new ThreadGroup("Group A");   
Thread t1 = new Thread(tg1,new MyRunnable(),"one");      //new MyRunnable is the one which implemented run() method
Thread t2 = new Thread(tg1,new MyRunnable(),"two");      //(arg1=thread gp, arg2=run impl, arg3=thread name
Thread t3 = new Thread(tg1,new MyRunnable(),"three");

To interrupt t1,t2,t3 in one time Thread.currentThread().getThreadGroup().interrupt();   or tg1.interrupt or tg1.stop()

Ques: Is thread share callstack?   //important
They share same address space but Each thread run in a separate callstack.


Ques: What is Thread Safety How can u achieve it?
When a thread is already working on an object and preventing another thread on working on the same object, this process is called Thread-Safety

There are four ways to achieve Thread Safety in Java. These are:
Using Synchronization.
Using Volatile Keyword.   static volatile int a = 0, b = 0;    //by making the variable used in method volatile provides thread safety
Using Atomic Variable.	    AtomicInteger count= new AtomicInteger();      //this ensures count is thread safe which in turns thread safe method 											where it is used
Using Final Keyword	//but it will give compiler error if thread modifies it

Note:Refer this https://www.geeksforgeeks.org/thread-safety-and-how-to-achieve-it-in-java/
https://www.journaldev.com/1061/thread-safety-in-java


Ques: can volatile be use with reference in java
Yes

Ques: Thread Safety Using concurrent.lock ?
Unlike their synchronized counterparts, concurrent collections achieve thread-safety by dividing their data into segments. 
In a ConcurrentHashMap, for instance, several threads can acquire locks on different map segments, so multiple threads can access the Map at the same time 

Ques: what is diff b/w Runnable(public void run()) and callable(public T call())?
callable return value in FutureObject
	Future<Integer> future = executorService.submit(task);
	Integer result = future.get().intValue();
	
https://www.baeldung.com/java-runnable-callable
Please Summarise it Later

Ques:What is work-stealing algorithm?
Fork Pool 

Ques?What is JMM ? and it's use?
Java Memory Model : It specifies how multiple threads access common memory in a concurrent Java application
helps a programmer to write multithreaded code that is stable and portable between various architectures.




----------
Ques: How in Multithreading handles Long, double variable?   //Long and Double values are not Atomic.Justify?

It splits it into 32+32bits and writes it with difeerent thread so they are not thread safe.

So point is, in Java, long and double aren’t thread safe. When multiple threads are going to access a long or a double value without synchronization,
 it can cause problems. To ensure atomic/thread safety, it is essential to use volatile to ensure changes made by one thread are visible to other threads.
 That’s how we can ensure the read/write is atomic and thread safe.
use: volatile double num;
volatile Long num;

However, if all reads and writes of 64-bit long and double values occur within a synchronized block, the atomicity of the read/write is guaranteed.

Reference: https://dzone.com/articles/longdouble-are-not-atomic-in-java
------------
Ques: withoud using synchronization or wait notify can u achieve concurrency?
Yes we can leverage it by using BlockingQueue Collection


Ques: Callable vs Runnable

a) Runnable tasks can be run using the      ||       Callables can be run only using the latter
	Thread class or ExecutorService 
 
b)This is suitable for situations where     ||       The Callable interface is a generic interface 
 we are not looking for a result of the              containing a single call() method – which returns a generic value V
 thread execution, for example, incoming
 events logging
 
c) No excepton is thrown                    ||      throws InvalidParamaterException   // Activatee only when u do future.get()

Refer:
https://www.javatpoint.com/java-executorservice
https://www.baeldung.com/java-executor-service-tutorial
https://www.baeldung.com/java-runnable-callable

Ques: How executor service Shuts Down? Important please read the first reference



...........................Topic: Collection.............
Ques : Fail Fast and Fail Safe Iterators in Java
Fail-Fast iterators immediately throw ConcurrentModificationException if there is structural modification of the collection.
Iterator on ArrayList, HashMap classes

Non fail-fast iterators (Fail Safe) 
iterators don’t throw any exceptions
Iterator on CopyOnWriteArrayList, ConcurrentHashMap classes are examples of fail-safe Iterator

Ques : Concurrent Modification ?
 Concurrent Modification in programming means to modify an object concurrently when another task is already running over it.
 
Ques: COllection implements ?
Iterable : to iterate over its element
Cloneable : to clone it
Serialixable : to transfer over network

Ques : ArrayList Read-only?
 by calling the Collections.unmodifiableList() method. (others unmodifiableSet,unmodifiableCollection) 

Ques: Concurrent HashMap?
It is thread safe and many thread can access it how?

In ConcurrentHashMap, at a time any number of threads can perform retrieval operation but for updation in the object, the thread must lock the particular
 segment in which the thread wants to operate. This type of locking mechanism is known as Segment locking or bucket locking.
 Hence at a time, 16 update operations can be performed by threads

Ques: Internal working of COncurrentHashMap?
https://medium.com/art-of-coding/hash-table-vs-concurrent-hashmap-and-its-internal-working-b28fc2725bdb 

Ques:ensureCapacity()
use for manually increasing the size of array List
ex: arrlist.ensureCapacity(5000);   //it gives the array list which can store 5000 objects

Ques: Treeset datastructure? //Balance Tree
Ques: TreeMap datastructure? //Red BLack Tree
Ques: Hashtable default capacity? //11

Ques: How to check element u are adding in Set Colllection is duplicate?
when u add it if it is already there it simply return false.

Ques: Sort HashMap based on keys?   //also value    //very important
BYKEY
use treemap.putAll(hm);    //if it is employee type it must implements Comparable Interface

BYVALUE
Take all entries into LinkedList type Collection
then sort it Collections.sort(list,comparator)
Iterate over list and put it into New Linked Hashmap and return that map

Ques: How Hashset find values are duplicate?
When you put an object into a Hashset it uses the object's hashcode value to determine where to put the object in the Set.
 But it also compares the object's hashcode to the hashcode of all the other objects in the Hash Set, and if there's no matching hashcode,
 the HashSet assumes that this new object is not a duplicate. HashSet finds a matching hashcode for two objects. one you're inserting and
 one already in the set-the HashSet will then call one of the object's equals() methods to see if these hashcode-matched objects really are equal.
 And if they're equal, the HashSet knows that the object you're attempting to add is a duplicate of something in the Set, so the add doesn't happen.

Override this equals method to check for equality of object along with hashcode. public boolean equals(Object o)

Ques:What is Rehashing in HashMap?
It occurred when hashmap gets full and new hashmap allocate using the load factor(.75)? 

Ques: Diff b/w Collections.sort() and TreeSet wrt Set.
Collections.sort sorts list collection  //Note: u need to convert set into list then u can apply sort.
while Treeset alwasy maintains some sorting order.

Ques: What is CopyOnarrayList?
It is a threadsafe version of ArrayList.
Interanlly when modification is done on the list it clones the list and does the changes so that while reading via iterator doesnt 
throw ConcurrentModificationException.

Keep in mind that, when we create an iterator for the CopyOnWriteArrayList, we get an immutable snapshot of the data in the list at the time 
iterator() was called. so if anybody adds anything after list.iterator it wont get printed.

Because of the copying mechanism, the remove(),add() and set() operation on the returned Iterator is not permitted – resulting with
 UnsupportedOperationException:
 . Note iterator throws that exception

Reference: https://www.baeldung.com/java-copy-on-write-arraylist

Ques: Pass Array Object in arrayList?
ArrayList<Integer> l = new ArrayList<Integer>(Arrays.asList(new Integer[] {1,2,4}));

list.toArray()  //coverts list to array
Arrays.asList(array)   //converts array to list
 
Ques: What is BlockingQueue?
BlockingQueue is an interface which extends the Queue interface. It provides concurrency in the operations like retrieval, insertion, deletion. 
While retrieval of any element, it waits for the queue to be non-empty. While storing the elements, it waits for the available space.
BlockingQueue cannot contain null elements, and implementation of BlockingQueue is thread-safe


Ques: What is descingdingIterator()?
LinkedList<Integer> list = new LinkedList<>();  list.add(1);list.add(2);list.add(3);
list.descendingIterator()  //3,2,1


Ques: If u have treemap and u have to store some userdefined class then how do u store it ?
using comparator



...........................Topic ExceptionHandling..............

Ques: Multicatch block in Exception ?
catch(Arithamticexception | IOException e)   //there should not be any relationship b/w in exceptions in multicatchblock

Ques: Can youwrite try without catch finally?
try without catch or finally is invalid.

Ques: how to not execute finally block?
	-System.exit()
	-Thread stopped using the stop() 
	
Note:It's also worth noting that, since any return statement in the finally block will override any returns or exception throws in the try/catch blocks,
	with interrupt() //finally executes

Ques : whT this snippet will return? //important

	public static int checkFinally() {
		
		try {
			System.out.println("in try");
			//return 0;
		throw new NullPointerException();
		}catch(Exception e) {
			return 1;
			
		}finally {
			return 2;
		}
		
	}
Ans: 2   i.e finally executes but after finally nothing executes.

Ques:SQL Excetion is checked or unchecked? //checked



System.exit(0) - Shutdowns JVM with normal termination
System.exit(non-zero) - Shutdowns JVM with abnormal termination( with stack trace if exception)



...........................Topic: Array.............
Ques: Creation of array?
int[] x= new int[3]; //capacity 3

or int[] x = {1,2,3,4};      //also int[][] x = {{10,20},{30,40}};   [[10,20] ,[30,40]]

Ques: Create Anonymous Array?
new int[]{1,2,3,4};



............Java8Features..........
Ques 1:What is Lambda Expression? 
()-> {}
use to implement functional interface  				//list.forEach(   (n)->System.out.println(n)  );  
And Less Code(ex apllying for each on list etc), iterate over list   //Runnable r2=()->{   System.out.println("Thread2 is running...");   };  

-------
Ques 2:What is Method Reference
Ans : By Static =  ClassName::MethodName;
By Insatnce Method = InstnceObject::MethodName;
By Constructor = className::new;
------
Ques 3:What is Functional Interface 

which only has one abstract method , can have any number of default and static methods
can have object class method
can have default mathod and static method
@FunctionalInterface

Ques : What is the advantage of Functional Interface?
We can use lambda expressions to instantiate them and avoid using bulky anonymous class implementation.

ex: implement runnable interface
Runnable r2=()->{  
                System.out.println("Thread2 is running...");  
        };  
        
 without lambda
 Runnable d=new Runnable(){  
            public void run(){System.out.println("Run method of runnable ");}  
        }; 
        Thread t = new Thread(d); 
        t.start();   //it calls the run method


can also have methods of object class why?
how many default and static method


Ques: why default method introduced in interface?
In java8 if any implemenation class dont know how to implement the method default method can be used.

Functional Interface In java
Runnable 
Callable
Comparator ? equals and compare
Comparable  //compareTo

Supplier 
Consumer
Predicate

Note Inte0rview QUes: https://www.java67.com/2018/10/java-8-stream-and-functional-programming-interview-questions-answers.html

------
Ques 4: Java Stream
It simply conveys elements from a source such as a data structure, an array, or an I/O channel, through a pipeline of computational operations.
It is functional in nature
It is lazily loaded and evaluates code when only it requires

Simple Definition: a stream is an iterator whose role is to accept a set of actions to apply on each of the elements it contains

Real life Ex: Tea net in kitchens

List<Float> productPriceList2 =productsList.stream()  
                                     .filter(p -> p.price > 30000)// filtering data..  using lambda expr
                                     .map(p->p.price)        // fetching price only from p object
                                     .collect(Collectors.toList()); // collecting as list  
                                     
Stream.iterate(1, element->element+1)
.filter(element -> ele%5==0).limit(5).forEach(System.out::println)    //5 10 15 20 25

long count = productsList.stream()  
                    .filter(product->product.price<30000)  
                    .count();       //.forEach(product -> System.out.println(product.name));  to print name
                    
collect() method - convert Set To List.....
 		   productsList.stream().collect(Collectors.toSet());
		
		    convert List Into Map...
		    productsList.stream().collect(Collectors.toMap(p->p.id, p->p.name)); 
sorted() method - sort the list
			List<Integer> list = Arrays.asList(new Integer[] {2,4,1,5,6});
			System.out.println(list.stream().sorted().collect(Collectors.toList()));   //ascending
			System.out.println(list.stream().sorted((a,b) -> b -a ).collect(Collectors.toList()));    //desccnding  ..... a-b then ascending
			
			sort list using stream sorted and Comparator;
			list.stream().sorted(Comparator.reverseOrder()).      //also .sorted()  for natural sorting
                          forEach(System.out::println);

		
reduce() method - accumate results
		productsList.stream().map(p->p.price).reduce((sum, price)->sum+price);   // accumulating price   and return as optional;
        	System.out.println(totalPrice);    //

min() max() method -
	.min(comparator)  it returns min value as optional using comparator // sam for max()
		Ex: list.stream().max((a,b)->a-b);
			list.stream().min((a,b)->a-b)
  
Ques: What is diff b/w filter() and map()?
	filter method just compares returns in true or false while map method transform the data and return it for ex: 
	1.  you can conevert String list into uppercase string list.
	2.  .map(i -> i * 3)

Ques: what is the diff b/w flatMap() and map() ?
	flat map() basically flattens up the values into one entity while map() just transform value and structure remains same
	Without flat map => [1,2],[1,1] => [[1,2],[1,1]] 
	With flat map => [1,2],[1,1] => [1,2,1,1]
	ref https://stackoverflow.com/questions/37154380/difference-between-map-and-filter-on-a-java-collection-stream  


Ques: How to find the first element greater than 5 from a list prime no. from a Stream with filter?
		We have a list of prime numbers in the increasing order e.g. 2, 3, 5, 7, 11, 13 and we need to find the first prime number which is greater than 5 i.e. 
		our code should return 7.

		list.stream()
			.filter(num -> num>5)
			.findFirst()     	//if list is sorted   //it returns optional that's why .get() is rquired
			.get();
			
			
		list.stream().filter(num -> num>5).findAny().get();   //if list is not sorted

Ques: What is terminal method in java Strems?
	findFirst()
	forEach()
	findAny()
	count()


Ques: What is peek() method?
to see what list is doing intermidiately
filter takes predicate to filter data. predicate is a functional interface which checks and returns either true or false.

Ques: convert an array to Stream?
String[] languages = {"Java", "Python", "JavaScript"};
Stream numbers = Stream.of(languages);
numbers.forEach(System.out::println);


Ques: What is the diff b/w stream() & paraallelStream()?when to use what?
paraallelStream() is good for large data as it produces threads internally while stream is good for small data where no new thread created and 
process is lightweight. Both can be used in differenet scenario
paraallelStream - large dataset (stream performance will be low)    //It also supoorts concurrency
Stream - small dataset (parallelstream performance will be low)

https://stackoverflow.com/questions/20375176/should-i-always-use-a-parallel-stream-when-possible

In short, the parallel Stream can paralyze execution, but, as Cay S. Horstman mentioned in Core Java S.E. 9 for the Impatient, there is significant overhead 
or parallelism, which only pays off if you are doing bulk data operation.

Read more: https://www.java67.com/2018/10/java-8-stream-and-functional-programming-interview-questions-answers.html#ixzz6qaSwfawy


Ques: optimise parallelStream Overhead?
The default processing that occurs in such a Stream uses the ForkJoinPool.commonPool(), a thread pool shared by the entire application.
We can actually pass a custom ThreadPool when processing the stream. to not use commponpool to increase efficiency or OutOfMemoryError
Note: when u create customPool please close it when u are done with it otherwise MemoryLeak will occur.


Reference-https://www.baeldung.com/java-8-parallel-streams-custom-threadpool
ForkJoinPool customThreadPool = new ForkJoinPool(4);
    long actualTotal = customThreadPool.submit(
      () -> aList.parallelStream().reduce(0L, Long::sum)).get();







        	                        
--------
Ques 5:what is Base64 Encoding and Decoding?
Ans : Use to encode decode message, url etc.
uses the Base64 alphabet as specified in RFC 2045 for encoding and decoding operations

Ex: It is used when u want to share cryptic data or url
MIME uses this technique
MIME-Multipurpose Internet Mail Extensions


Ques:What is MD5 used for? 
MD5 is primarily used to authenticate files. It's much easier to use the MD5 hash to check a copy of a file against an original 
than to check bit by bit to see if the two copies match. MD5 was once used for data security and encryption, but these days 
its primary use is authentication
 
-----

Ques 6: Default method in interface
Ans :  yes we can create default method in a java8 interface also we can make static method in an interface
but still abstarct class and interface are diffrent as we can not create constructor in an interface whereas we can make that in abstarct class

why it is made? //to give default implementation , you can override it to create your implementation //It can be of any number

You can also define static methods inside the interface. Static methods are used to define utility methods. //It can be of any number
-----

Ques 7: StringJoiner
StringJoiner joinNames = new StringJoiner(",");   // passing comma(,) and square-brackets as delimiter   
        joinNames.add("Rahul");  
        joinNames.add("Raju");  
        joinNames.add("Peter");  
        joinNames.add("Raheem");  
        System.out.println(joinNames);   // Rahul,Raju,Peter,Raheem

StringJoiner joinNames = new StringJoiner(",", "[", "]");   // [Rahul,Raju,Peter,Raheem]

joinNames.setEmptyValue("Empty Value");;  /// use to get default value of string i.e no chance of NullPointerException

------
Ques 8: For Each in java8
 gamesList.forEach(games -> System.out.println(games)); 
    or
  gamesList.forEach(System.out::println); 
    


Ques : Java Collectors?

Collectors is a final class that extends Object class.
It provides reduction operations, such as accumulating elements into collection
collect(Collectors.toList())
collect(Collectors.toSet())
collect(Collectors.summingDouble(x->x.price));  // productsList.stream().collect(Collectors.summingInt(x->x.id));  
collect(Collectors.counting())
collect(Collectors.Map(p.id,p.name)



------ 
 
Ques9: Optional Class
Optional<String> checkNull = Optional.ofNullable(str[5]);  
        if(checkNull.isPresent()){  // check for value is present or not  
            String lowercaseString = str[5].toLowerCase();  
            System.out.print(lowercaseString);  
        }else  
            System.out.println("string value is not present"); 
            
          or
          
 Optional<String> checkNull = Optional.ofNullable(str[5]);  
        checkNull.ifPresent(System.out::println);   // printing value by using method reference  
        System.out.println(checkNull.get());    // printing value by using get method  
        
Optional.empty() //to check is Optional empty (alternative to null)

Ques: What is get method of Optional?
The get() method of java.util.Optional class in Java is used to get the value of this Optional instance. If there is no value present in this Optional instance,
then this method throws NullPointerException.
        
-----------------      
QUes10: Parallersort in array
Arrays.parallelSort(arr,0,4);  //0 is inclusive 4 is exclusive  , use for partial sorting
 Arrays.parallelSort(arr)
 
Ques: Java Type Inferenece?
In java 8 it can automatically recoginize type for example in lambda empression no need to give any type.

------------
Qyes:Parameter Reflection?
public class Calculate {  
    int add(int a, int b){  
        return (a+b);  
    }  
    int mul(int a, int b){  
        return (b*a);  
    }  
}  
javac -parameters Calculate.java  
-parameter flag in the above command is used to store parameters in the Calculate class file. bydefault it doesn't.

mul int a int b      //mul int arg0 int arg1     without -parameter
add int a int b	//add int arg0 int arg1

Ques 11. What is Type Annotation? 
@NonNull String str;  
@Encrypted File file  
public void methodName() throws @ZeroDivisor ArithmeticException

all such annotation is used for stronger type checkings

Note:Learn Repaeatable Annotation

-----
Ques: Java 8 Date Time?

older java.util.Date and java.util.Calendar are not thread safe and dont have much utilities to date object.
In java8 java.time package like LocalDate, LocalTime, LocalDateTime, ZonedDateTime, Period, Duration and their supported APIs.

Adavtage : java 8 Date has ZonedDate Time functionality

1. LoacaleDate & LocalTime
LocalDate localDate = LocalDate.now();
LocalDate.of(2015, 02, 20);
LocalDate.parse("2015-02-20");
boolean leapYear = LocalDate.now().isLeapYear();

same for LocalTime

2.LocalDateTime
LocalDateTime.now();
LocalDateTime.of(2015, Month.FEBRUARY, 20, 06, 30);
LocalDateTime.parse("2015-02-20T06:30:00");

3. ZonedDateTime
ZoneId zoneId = ZoneId.of("Europe/Paris");

Ques: convert localDatetime into specif zone ex paris.
ZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime, zoneId);

Ques :Period And Duration also very important utility for date and time how?
ex: int five = Period.between(initialDate, finalDate).getDays();

LocalDate initialDate = LocalDate.parse("2007-05-10");
LocalDate finalDate = initialDate.plus(Period.ofDays(5));



................Topic Java 7 Features..............

Ques :Features of java7?

1.MultiCatch //refer exception handling topic

2.Try WithResurces  //refer exception handling topic

3.Switch in String?
String game="String";
switch(game){  
        case "Hockey":  
            System.out.println("Let's play Hockey");  
            break;  
            }

4.Type Inference
	In Java 7, Java provides improved compiler which is enough smart to infer the type of generic instance. Now, you can replace the type
	arguments with an empty set of type parameters (<>). This pair of angle brackets is informally called the diamond.
	ArrayList<Integer> list = new ArrayList<Integer>(); //Java6
	ArrayList<Integer> list = new ArrayList<>();  //Java7 no need to write Integer on Lefthand side
	
5.Binary Literal
byte b1 = 0b101;    // Using b0, The b can be lower or upper case  byte b2 = 0B101;    // Using B0  
System.out.println("b1 = "+b1);   //o/p 5  (5 in binary is 101)

6.Number Literals 
using underscore we can improve readablity of numbers in java
 // Underscore in integral literal  
        int a = 10_00000;  //10,00000
          
        
............Topic : Generics & serialization........

Ques: What will you do if you want type safety only for number or its child component?
Use < ? extends Number>

Ques: You need to bound only for read no write
methodOne(ArrayList<?> l):

Ques: ArrayList<Integer> list = new ArrayList<>();   //It is Type Inference

Ques: Serilaization & Deserialization?
	Dog d1=new Dog();
	System.out.println("Serialization started");
	FileOutputStream fos=new FileOutputStream("abc.ser");
	ObjectOutputStream oos=new ObjectOutputStream(fos);
	oos.writeObject(d1);
	System.out.println("Serialization ended");

	System.out.println("Deserialization started");
	FileInputStreamfis=new FileInputStream("abc.ser");
	ObjectInputStreamois=new ObjectInputStream(fis);
	Dog d2=(Dog)ois.readObject();
	System.out.println("Deserialization ended");
	System.out.println(d2.i+"................"+d2.j);

Output:
Serialization started
Serialization ended
Deserialization started
Deserialization ended
10................20




............General Question........
Ques 1:Why in a java class we cannot declare two public class?
A Java source file can have only one class declared as public, we cannot put two or more public classes together in
a . java file. This is because of the restriction that the file name should be same as the name of the public class with . java extension.
Answers



Ques 2:What is Pagination
To show data in different parts is pagination. For ex at google page it shows 10 search link and rest show with number hyperlink in the end

Ques: What is Copy COnstructor?
which gives the same object content
how ? create constructor with its Object type arg and assign data variable

Ques : How to make constant in java ?  // To make any variable a constant, we must use 'static' and 'final' modifiers ?

Ques: What is a Virtual Function In Java?
Every non-static method in Java is by default a virtual method

Ques : What is a Pure Virtual Function In Java?
interface methods // no implemenation method just declareation

Ques : why we use packages in java?
To avoid name clashes
To give class some scope

Ques : Java doesn't support default arguments? Yes
static int fun(int x = 0)   //compiler error
    {
      return x;
    }
    
Ques : What is >> & >>>operator ? //It is a right shift operator and The left operands value is moved right by the number of bits specified by the right operand
>> for signed -4>>1 = -2  ,  4>>1 = 2
>>> for unsigned -4 >> 2


Ques: class extends Object , interface what?
 Every public method in Object class, there is an implicit abstract and public method declared in every interface which does not have direct super interfaces.
 This is the standard Java Language Specification which states like this,
 
 "If an interface has no direct superinterfaces, then the interface implicitly declares a public abstract member method m with signature s, return type r,
 and throws clause tcorresponding to each public instance method m with signature s, return type r, and throws clause t declared in Object,
 unless a method with the same signature, same return type, and a compatible throws clause is explicitly declared by the interface.”


Ques : Object Class Methods?
https://www.javatpoint.com/object-class
Total 11
tostring , equals , hashcode ,finalize    //most commonly used
 getClass ,getClone,    // less commonly used
wait , notify ,notifyall    //used by threads

Ques : Is Object class Serializable by default? 
no 
The reason the java.lang.Object didnt implement Serializable is because, what if you do NOT want to make certain fields as Serializable and you my
 mistake missed to add transient to that field, then will be a havoc


Ques : In how many ways we can create new object in java?   //refer black oops copy for detail
newInstance()   
	- Test t = (Test)Class.forName("Test").newInstance();
clone()	
	- Test t2 = (Test)t.clone();
new
	- Test t = new Test();

readObject()	Test t = objInputStream.readObject();
factorymethod   Runtime r = Runtime.getRuntime();


Note:
final variable is already serializable i.e no effect of transient keyword
The transient keyword in Java is used to avoid serialization. 

Ques :final blank variable?
class Student{  
int id;  
String name;  
final static String PAN_CARD_NUMBER;  //can be initiliase by static block
final String PAN_CARD_NUMBER;  //can be initiliase by constructor
...  
}  





Ques : Marshalling is the process of writing Java objects to XML file.
Unmarshalling is the process of converting XML content to Java objects


Ques:what are the default imported package in java?
The Java compiler automatically imports two entire packages for each source file: 
(1) the java. lang package and 
(2) the current package (the package for the current file).





Ques:System.err.println("text") ? //print 'text' in red color

Ques: If two interfaces has same default method and a class implements these two interfaces?
It gives compiler error saying the default method is amgbious.



Ques: CustomAnnotation in java?

[Class Level annotation]

Step 1: The first step toward creating a custom annotation is to declare it using the @interface keyword
public @interface JsonSerializable {
}

Step2: to add meta-annotations to specify the scope and the target of our custom annotation:

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.Type)
public @interface JsonSerializable {
}

--

[Field Level annotation]

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.FIELD)
public @interface JsonElement {
    public String key() default "";
}


[Method Level Annotation ]
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface Init {
}




.................

Ques : what is System.arraycopy() in Java?

use to copy some element from source to destination array
System.arraycopy(source_arr, sourcePos, dest_arr, destPos, len);

source_array : 10 20 30 40 50 60 70 80 90 100 
sourcePos : 3
dest_array : 15 25 35 45 55 65 75 85 95 105 
destPos : 5
len : 4
final dest_array will become : 15 25 35 45 55 40 50 60 70 105 


Ques: scp in java created in which memory?  //In Heap

Ques: primitive variable stores in ? 
Instance level variables(can also be primitives) are part of instances (objects). So, they will be allocated on the heap (as part of the object.)
 Method level / Local variables : Stack (for Primitives


Ques: Create custom immutable class in java?  //revise it
To create an immutable class in Java, you have to do the following steps.

1. Declare the class as final so it can’t be extended.
2. Make all fields private so that direct access is not allowed.
3. Don’t provide setter methods for variables.
4. Make all mutable fields final so that its value can be assigned only once.
5. Initialize all the fields via a constructor performing deep copy.
6. Perform cloning of objects in the getter methods to return a copy rather than returning the actual object reference.

refer for code:  https://www.journaldev.com/129/how-to-create-immutable-class-in-java

Ques: String equalsIgnoreCase() method ?
We can validate username,email(not password) by using .equalsIgnoreCase() method


Ques: Can 2 different objects created in Java are same(have same this) when their hashcode is same?
No
2 diferent objects can for sure have the same hashcode and they dont need to be equal...
ex:2person can have same birth date but they dont need to be equal right.


Ques: how do u create json object in java?

Create Json String...
String jsonString = jsonElementsMap.entrySet()
        .stream()
        .map(entry -> "\"" + entry.getKey() + "\":\"" 
          + entry.getValue() + "\"")
        .collect(Collectors.joining(","));
    
    return "{" + jsonString + "}";



Ques: What is the differenece b/w = & +=

Ques: What is the diff b/w b+1 &b++?
b+1  //may be loss of precision
b++ //no loss of precision (type of b)(n+1);

Ques: Rules for overriding equals method?
If we are passing different type of objects (heterogeneous object) our
.equals() method should return false but not ClassCastException i.e., we
have to handle ClassCastException to return false

If we are passing null argument our .equals() method should return false
but not NullPointerException i.e., we have to handle
NullPointerException to return false.

Ques: What is the Contract between .equals() method and hashCode() method?

equals() return true then hashcode is same
equals return false then hashcode can be same or different

hashCode() equal -       we cant predict that equals is true or false
hashcode() not equal -   we can say that they are not equals


Ques: What is final blank Variable?   
private final String PAN_CARD_NUMBER;  

you can initiliase it only in constrcutor. It is once assigned will never reassigned.
for ex PAN number of a user once created it will not be reassigned.
objectInstance.PAN_CARD_NUMBER =200   //compiler error

Ques: What is final static blank Variable? 
private final static String UNIVERSITY_NAME;  

you can initiliase it only in static block. It is once assigned will never reassigned.
for ex - UNIVERSITY_NAME of a all student is same and never be changed.
ClassName.UNIVERSITY_NAME = "AKTU"   //compiler error


Ques: How to Make ReadOnlyClass in Java?  
all fields must be private.
no setters.    //for write only no getters


Ques: Diff b/w System.out.println(1/0),  System.out.println(1.0/0.0);
one give exception another one gives Infinity
Note: An IEEE754 floating point double (used by Java) has a representation of infinity. ... In that sense, 1.0 / 0.0 is calculable since it takes place
 in floating point arithmetic. An integral type has no representation of infinity, so an exception is thrown. 1 / 0 is computed in integer arithmetic
 

Ques: What is the diff b/w singleton and static method ?when to use what?
Singleton can be eager or lazy but static is can only be eager
No Inheritence and Polmorphism Benefit in Static method

Reference- 
https://javarevisited.blogspot.com/2013/03/difference-between-singleton-pattern-vs-static-class-java.html#axzz6ujFddOxp

Ques: How class Loads in Java?
https://www.javatpoint.com/classloader-in-java

Ques: Object Lifecycle in Java?
creation and initialization, use, and destruction



....Some Code to remember.....

 Math.abs(-1) // it will become 1



.........................Topic :JUnit...................

JUNIT testing is used for unit testing

Ques: What version you are using ?
version using junit4

Ques: How do u handle exception using Junit?
@Test(expected = ArithmeticException.class)

Ques: What are the various JUNIT Annotations
@Test annotation specifies that method is the test method.
@Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second).
@BeforeClass annotation specifies that method will be invoked only once, before starting all the tests.
@Before annotation specifies that method will be invoked before each test.
@After annotation specifies that method will be invoked after each test.
@AfterClass annotation specifies that method will be invoked only once, after finishing all the tests.


Ques: What is the diff b/w BlackBox Testing and WhiteBox Testing?
1.It is done by Testers		||		It is done by Developers
2.implemenatation knowledge		||		Internal implementation knowledge is neeeded
not needed
3.ex-Regression Testing		||		Loop Testing,condition tetsiting,algo testing




