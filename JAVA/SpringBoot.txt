
........Topic :Spring Boot..................
Ques: Whatt version of spring u are using?
2.4.5

Ques: What are the dependencies u added in .pom file?
spring-boot-starter-parent
spring-boot-starter-data-jpa
spring-boot-starter-data-rest
mysql-connector-java
validation-api
spring-boot-starter-test
spring-boot-devtools
spring-boot-starter-hateoas
swagger
spring-boot-maven-plugin
spring-boot-starter-security



Spring Boot is a Spring module that provides the RAD (Rapid Application 
) feature to the Spring framework.


Annotations   //Spring Boot Annotations is a form of metadata that provides data about a program

different Annotations // please refer https://www.javatpoint.com/spring-boot-annotations

@SpringBootApplication: It is a combination of three annotations @EnableAutoConfiguration, @ComponentScan, and @Configuration.

application.properties //Built-in mechanism for application configuration using a file application.properties
conatins application configuration

YAML Properties File //The Yaml file works because the Snake YAML jar is present in the classpath but the Yml file should be present in the classpath.

--------------------------------------------------------
Spring Boot Starter..
spring-boot-starter-*,  in pom.xml   // ex: 	spring-boot-starter-data-jpa
To add jars in the classpath. 

For ex:
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-rest</artifactId>
</dependency>


Spring Boot Starter Parent...
1. It provides default configurations for our applications. 
2. It builds dependnecy tree in springboot application.
3. It is used internally by all dependencies. 
4. These have the advantage that you no longer need to specify a version for each dependency

All Spring Boot projects use spring-boot-starter-parent as a parent in pom.xml file.

<parent>  
	<groupId>org.springframework.boot</groupId>  
		<artifactId>spring-boot-starter-parent</artifactId>  
	<version>2.4.0</version>  
</parent>  
-------------------------------------------------------------



..............................Topic: Spring Data JPA......................
adds a layer on the top of JPA.
Spring Data JPA adds its own features such as the no-code implementation of the repository 
creation of database queries from the method name.   //also creation of pattern 

Features
No code repository
reduced boiler plate code
Generated queries based on the method name

Spring Data JPA provides three repositories are as follows:

CrudRepository:
PagingAndSortingRepository:
JpaRepository:

Ques : What is jpa? //Map application classes to database table

Ques : Entity Manager: 
Once we define the mapping, it handles all the interactions with the database.

Ques : JPQL (Java Persistence Query Language)
 It provides a way to write queries to execute searches against entities. It is different from the SQL queries. JPQL queries already understand
 the mapping that is defined between entities. We can add additional conditions if required.
Criteria API: It defines a Java-based API to execute searches against the database.

Note: Spring internally generates a JPQL (Java Persistence Query Language) query based on the method name. 


........@QUery In JPA......................

Ques: write native sql query in jparepository?
@Query(
  value = "SELECT * FROM USERS u WHERE u.status = 1", 
  nativeQuery = true)
Collection<User> findAllActiveUsersNative();    //Note we cannot pass sort object to this method as it is not supported , it throws
							Invalidjpaquerymethodexception



@Query("SELECT u FROM User u")  //get all user
List<CompanyMaster> findAllActiveUsers();

@Query(value = "SELECT u FROM User u ORDER BY id")
Page<User> findAllUsersWithPagination(Pageable pageable);

@Query("SELECT u FROM CompanyMaster u WHERE u.cmpCode = ?1")  //get cmp with id 40   using Indexed Parameter
List<CompanyMaster> findAllActiveUsersByID(Integer cmpCode);	

@Query("SELECT u FROM User u WHERE u.status = :status and u.name = :name")    //get cmp with status & name   using Named Parameter
User findUserByStatusAndNameNamedParams(
  @Param("status") Integer status, 
  @Param("name") String name);
  
@Query(value = "SELECT u FROM User u WHERE u.name IN :names")
List<User> findUserByNameList(@Param("names") Collection<String> names);


For Update..
@Modifying    //rememebr this we have to use it while firing Query in JPA SpringBoot
@Query("update User u set u.status = :status where u.name = :name")
int updateUserSetStatusForName(@Param("status") Integer status, 
  @Param("name") String name);
  
Note:The return value defines how many rows the execution of the query updated.

For Insert....
@Modifying
@Query(value = "insert into Users (name, age, email, status) values (:name, :age, :email, :status)",
  	nativeQuery = true)
void insertUser(@Param("name") String name, @Param("age") Integer age, 
  @Param("status") Integer status, @Param("email") String email);

Note: To perform an insert operation, we have to both apply @Modifying and use a native query since INSERT is not a part of the JPA interface:



-------	
Ques : Sorting for Jpa?
userRepository.findAll(Sort.by(Sort.Direction.ASC, "name"));

Pageable sortedByName =   PageRequest.of(0, 3, Sort.by("name"));   //PageRequest.of(0, 3, Sort.by("price").descending());
-----

Ques: Pagination for JPA?
Pageable firstPageWithTwoElements = PageRequest.of(0, 2);
return cmpMasterRepository.findAll(firstPageWithTwoElements);
Note : it fires extra query to get count if u dont want that just take it as List<T> not Page<T>.

Ques:what is Slice<T>
A Slice only knows whether the next slice is available or not.
-----

Ques: EntityManager ?
@PersistenceContext
   private EntityManager entityManager;

Ref---https://www.baeldung.com/spring-data-jpa-query

-------
http://localhost:8080/h2-console
username : sa
password : 


Ques: Spring Boot repositries predefinedmethod
userRepository.findAll();     //list of users
userRepository.findById(id);   //return specific user with id and it is a Optional<User> and we can get the user using .get() method
userRepository.deleteById(id);  //delete user with id   .... return nothing
User sevedUser=userRepository.save(user); //to save new user  (by post method)

fetch=FetchType.LAZY  //It tells to lazily load child component
			The reason we explicitly set the fetch attribute to FetchType.LAZY is because, by default, all @ManyToOne and @OneToOne 
			associations are fetched eagerly, which can cause N+1 query issues.



[  @OnetoMany  & @ManytoOne ].........................
Refer this
https://stackoverflow.com/questions/11938253/whats-the-difference-between-joincolumn-and-mappedby-when-using-a-jpa-onetoma

Real Life Example : A user can have multiple post
Foriegn Key Concept use in this mapping

1.Unidirectional 
2.Bidirectional

1.Unidirectional
If you use the @OneToMany annotation with @JoinColumn in User List<Post> post,and nothing in the post then you have a unidirectional association.
put this only in the user...
@OneToMany(cascade = CascadeType.ALL)
@JoinColumn(name = "user_id")
private List<Post> comments = new ArrayList<>();

2.Bidirectional
If you use the @ManytoOne with the mappedBy attribute set, you have a bidirectional association
In our case, both the User entity has a collection of post child entities, and the child post entity has a reference back to the parent User

put this in the user...
@OneToMany(mappedBy = "user", cascade = CascadeType.ALL)
private List<Post> comments = new ArrayList<>();

put this in the post..
@ManyToOne(fetch = FetchType.LAZY)
private User user;

Note: The reason we explicitly set the fetch attribute to FetchType.LAZY is because, by default, all @ManyToOne and @OneToOne
 		         associations are fetched eagerly, which can cause N+1 query issues.


Ques:what is the use of mappedBy?    //very Important question
The mappedBy attribute of the @OneToMany annotation references the user property in the child post entity, and, this way,
 Hibernate knows that the bidirectional association is controlled by the @ManyToOne side.


Ques: which is better Unidirectional or bidirectional?
The unidirectional @OneToMany association does not perform very well, so you should avoid it.
You are better off using the bidirectional @OneToMany which is more efficient.


Note:For a bidirectional association, you also need to have two utility methods, like addPost and removePost in User POJO Class
public void addPost(Post post) {
    posts.add(comment);
    post.setUser(this);  //set User to the User property in Post POJO Class
}

public void removePost(Post post) {
    posts.remove(comment);
    post.setUser(null);  //nullify User to the User property in Post POJO Class as it is removed from the post lists in User POJO Class
}

Note: For other mapping refer HIbernateQues.txt

Some Mapping Question........................
Ques : orphanRemoval=true
orphanRemoval is an entirely ORM-specific thing. It marks "child" entity to be removed when it's no longer referenced from the "parent" entity,
 e.g. when you remove the post from the corresponding collection of the User entity.




....................................
Spring Boot Actuator
help us to monitor and manage the Spring Boot application.
for ex : {"status":"up"}

actuator/health -> endpoint provides the basic health information of an application

Note:Try it with full application to see all features
.....................................

Spring Boot Starter Test
The spring-boot-starter-test is the primary dependency for the test

default ContextLoader - SpringBootContextLoader

.......................Topic: SpringBoot Dev Tools....................

It picks up the changes and restart the application.
also Live Reloading

Features------
Property Defaults
Spring Boot provides templating technology Thymeleaf that contains the property spring.thymeleaf.cache. 
It disables the caching and allows us to update pages without restart app.

Automatic Restart
 Auto-restart means reloading of Java classes and configure it at the server-side
 after that dynamically deployed and server restart happen

Spring Boot ClassLoaders:
base ClassLoader -    The classes that do not change (third-Jars) are loaded in the base ClassLoader.
restart ClassLoader - The classes that we are actively developing are loaded in the restart ClassLoader.

Note:To disable
spring.devtools.restart.enabled:false

LiveReload: 
It is an embedded SPringboot sever called LiveReload  //also known as auto refresh

Note:To disable
spring.devtools.livereload.enabled:false.

....................Topic: Spring Boot Multi Module Project................

1. Nested maven projects is called multi module project
2. the parent project works as a container for base maven configurations.
3. Advantage - Easy to maintain or remove or add the sub applictation in big enterprise application

For example, we are creating an EAR (Enterprise ARchive), WAR (Web ARchive), and JAR (Java ARchive) file. A JAR file is bundled into
 a war file that is bundled into an EAR file. The EAR file is the final package that is ready to deploy on the application server.


Parent pom.xml 	// consists the list of all modules, common dependencies, and properties that are inherited by the child projects
The parent POM defines the Group ID, Artifact ID, version, and packaging
For Multi ModuleProject - <packaging>pom</packaging>  not "jar" &
add
	<modules>  
		<module>module1</module>  
		<module>module2</module>  
	</modules> 
	



Note:
When we run the multi-module project, all the modules are deployed together in an embedded Tomcat Server.
Child Pom file does not contain the common dependencies like starter-web, web-mvc, etc. It inherits from parent

....................Topic: Spring Boot Packaging...................................
three types
[Ear]
The below two files(war,jar) are packaged as a JAR file with the .ear extension
 
[War]
WAR is a module that loads into a Web container of the Java Application Server
Advantage- It can be deployed easily on the client machine in a Web server environment. To execute a WAR file, a Web server
 or Web container is required. For example, Tomcat, Weblogic, and Websphere.

[Jar]
A file that encapsulates one or more Java classes, a manifest, and descriptor is called JAR file

Manifest File - A manifest file in computing is a file containing metadata.

Deescriptor -???



=======================================================================================================================
..............Topic : Rest With Spring Boot..............

Ques:Why Representaion State Transfer?   //bcoz it provide the representation of the resource.

HTTP also defines the following standard status code:
1xx - Informational.
2xx - Successful.
3xx - Redirection.
4xx - Client error.
5xx - Server Error.

200: SUCCESS                //HttpStatus.
201: CREATED		//HttpStatus.CREATED

301: MOVED PERMANANETLY
308: PERMANENT REDIRECT


400:Bad Request		//HttpStatus.BAD_REQUEST
401: UNAUTHORIZED	//HttpStatus.UNAUTHORIZED
404: RESOURCE NOT FOUND      //HttpStatus.NOT_FOUND
406:Not acceptable

500: SERVER ERROR	//HttpStatus.INTERNAL_SERVER_ERROR


GET: It reads a resource. 
PUT: It updates an existing resource.  
POST: It creates a new resource.
DELETE: It deletes the resource.

POST is NOT idempotent.
GET, PUT, DELETE, HEAD, OPTIONS and TRACE are idempotent.

Ques :Can we exclude some files from autoconfiguration in spring boot ?
@SpringBootApplication (exclude={JacksonAutoConfiguration.class, JmxAutoConfiguration.class})  
spring.autoconfiguration.exclude=org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration  


Http req ----->Dispatcher Servlet
					|
				ControllerClass
					|
Http res<------	view

Ques : ResponseEntity Class ?
extends HttpEntity and HttpStatus class.
user can use it to know the location where his data stored in the server by reading headers in the response
	@PostMapping("/users-with-entity")  
	public ResponseEntity<Object> createUserWithStatus(@RequestBody User user)  
	{  
	User sevedUser=service.save(user);    
	URI location=ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(sevedUser.getId()).toUri();
	System.out.println(location);
	return ResponseEntity.created(location).build();  
	} 

location- http://localhost:8080/api/users/6


 
Ques :if the date is displaying in the default timestamp format?
spring.jackson.serialization.write-dates-as-timestamps=false   // in application.properties file

------------------------------------------------------------------

Ques :What is hibernate Validator   //Implemenet java Bean Validation API

Ques :What is dispatcher servlet?   //It is front controller to the spring application
					//it passes all the reques to controller method
Ques : Jackson Jar    // implememntation entity of rest fremaework

Ques : Spring MVC AUtoConfigurations?   //Dispatcher servlet, a view resolver, Jackson, data source, transaction manager etc

Ques :Auto configuration done by Spring Boot?

DispatcherServletAutoConfiguration (disatcherservlet)
DataSourceAutoConfiguration (hibernate)
JacksonAutoConfiguration (rest services)
ErrorMvcAutoConfiguration (#basicErrorController)


Ques: HelloWorld bean returns response in which format?   //json( all data member in the class)


 

...........................Topic:ExceptionHandling in SPringBooot.................
 Ques: WHen WhiteLabelError comes   //when there is no error handling in the app . It is default error handler in spring app

Ques :What is ResponseEntityExceptionHandler class.
 It is an abstract and base class for the exceptions that provide centralized exception handling across all the different exception handler methods

ResponseEntityExceptionHandler  //default exception handler


	@ExceptionHandler(Exception.class) //override method of ResponseEntityExceptionHandler class  
	public final ResponseEntity<Object> handleAllExceptions(Exception ex, WebRequest request)  
	{  
		
		ErrorFlowManagement errorFlowMgt= new ErrorFlowManagement(new Date().toString(), ex.getMessage(), request.getDescription(false));
		
		//returning exception structure and specific status   
		
		return new ResponseEntity(errorFlowMgt, HttpStatus.NOT_FOUND);
		//return new ResponseEntity<ErrorFlowManagement>(errorFlowMgt, HttpStatus.INTERNAL_SERVER_ERROR);
	}


........................Topic : SpringBoot Validation......................

When we get a request to create a user, we should validate its content. If it is invalid, we should return a proper response.

@Valid     //place in controller -- use to validate response body userjson object
public void createUser(@Valid  @RequestBody User user)  

@Size(min=5) 	  //place in pojo   -- size must be min 5
private String name;  

@Past	   //place in pojo   -- date should be from past i.e before present
private Date dob;  
	
	
........................Topic : HATEOAS......................	
HATEOAS acronyms for Hypermedia as the Engine of Application State
for ex: if you search for some user it will give u a link to all user autmatically if it is configured in the application
Term hypermedia refers to content that contains a link to other forms of media like images, movies, and text

Resource Describes own capabilities
Resource describes own interactions

Resource<User> resource=new Resource<User>(user);   //constructor of Resource class  
//add link to retrieve all the users  
ControllerLinkBuilder linkTo=linkTo(methodOn(this.getClass()).retriveAllUsers());  
resource.add(linkTo.withRel("all-users"));  
return resource;  

 "_links" : {
    "users" : {
      "href" : "http://localhost:8080/api/users"
    },

........................Topic : Internationalization......................	
Ques :What is Internationalization of Restful services
Internationalization is the process of designing web applications or services in such a way that it can provide support for various countries.

Why It is I18N?   // because the word internationalization has total 18 characters starting from I to N 

In main class...
	@Bean
	public LocaleResolver localeResolver()
	{
		AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver();
		localeResolver.setDefaultLocale(Locale.US);
		return localeResolver;
	}

In controller class

	@GetMapping(path="/i18n")  
	public String helloWorldInternationalized()  
	{  
		return messagesource.getMessage("good.morning.messsage", null, LocaleContextHolder.getLocale());
	}  

........................Topic : Content Negotiatations......................

Content negotiation is the process of selecting the best representation(xml,json,html)   for a given response when there are multiple representations available

If we need to handle request via xml import jackson-dataformat-xml depenedncy in pom.xml


........................Topic : HTTP Headers......................

Content-type    //An incoming request may have an entity(User Object entity) attached to it. To determine the type of entity server uses the HTTP
				request header Content-Type
Content-Type: application/json
Content-Type: application/xml
Content-Type: text/html
Content-Type: images/jpg 
etc.

HTTP header ACCEPT    //It is used to determine what type of representation is desired at the client-side.
Accept: application/json  




........................Topic : Annotations......................
Spring Boot Annotation
@SpringBootApplication: It is a combination of three annotations @EnableAutoConfiguration, @ComponentScan, and @Configuration.
	@EnableAutoConfiguration :auto configure bean present in classpath
	@ComponentScan: It is used when we want to scan a package for beans. It is used with the annotation @Configuration
	@Configuration: It is a class-level annotation.The class annotated with @Configuration used by Spring Containers as a source of bean definitions.
	
Note : Auto-configuration can be enabled by adding @SpringBootApplication
	
Example:
@ComponentScan(basePackages = "com.javatpoint")  
@Configuration  
public class ScanComponent{
}

-----------------------
@SpringBootTest & @Test   //It applies on a Test Class that runs Spring Boot based tests

-------------
@Controller     //marks a class as a web request handler basically used in Spring MVC
---------------------
@RestController //Special controller used in RESTFul web services and the equivalent of @Controller + @ResponseBody.


------------------
@RequestMapping("/api") //map request
		This annotation maps HTTP requests to handler methods of MVC and REST controllers
		Ex:@RequestMapping("/api")
		public class UserController {
----------------
@GetMapping  //map get request means require some info
		@GetMapping("/users")  
		public List<User> retriveAllUsers()  
		{  
			return service.findAll();  
		} 
------------------
@PostMapping //maps update info 
		@PostMapping("/users")  
		public void createUser(@RequestBody User user)  
		{  
		User sevedUser=service.save(user);    
		}  
-----------------
@RequestBody // The @RequestBody annotation maps body of the web request to the method parameter
--------------
@PathVariable 
		@GetMapping("/users/{id}")  
		public User retriveUser(@PathVariable int id)  
		{  
		return service.findOne(id);  
		}
---------------
@Requestparam? //all param after ?name='sky' ex @RequestParam("name") String name
		@GetMapping(path="/reqparam")
		public String checkRequestParam(@RequestParam String param) {
			System.out.println(param); //use http://localhost:8080/api/reqparam?param=s
			return "Request Param is : " + param;
		}
--------------
@ResponseStatus(HttpStatus.NOT_FOUND)  	//use to set Http Status Code 


---------------
@ControllerAdvice  -- use for some advice for example exception if user not found
apply same for ex: exception handling throughout the application


@ExceptionHandler(Exception.class) 				//for throw Exception  (if any handling method like conatctnotfoundexception not 									thier then this method execute by default
@ExceptionHandler(ContactNotFoundException.class)     //for   throw ContactNotFoundException

--------------
@DeleteMapping  - delete user

	@DeleteMapping("/users/{id}")  
	public void deleteUser(@PathVariable int id)  
	{  
		User user= service.deleteById(id);  
		if(user==null)  
			//runtime exception  
			throw new UserNotFoundException("id: "+ id);  
	}  



--------------
@Valid     //place in controller -- use to validate response body userjson object
public void createUser(@Valid  @RequestBody User user)  

@Size(min=5) 	  //place in pojo   -- size must be min 5
private String name;  

@Past		//place in pojo   -- date should be from past i.e before present
private Date dob;  
		



----------------
@RequestHeader //Annotation which indicates that a method parameter should be bound to a web request header

@Configuration //Indicates that a class declares one or more @Bean methods and may be processed by the "Spring container" to generate bean
 				definitions andservice requests for those beans at runtime, 
for ex: 
 @Configuration
 public class AppConfig {

     @Bean
     public MyBean myBean() {
         // instantiate, configure and return bean ...
     }
 }
 
------------------
@RepositoryRestResource

It tells spring boot container that is it the dao for the application












 ............Topic: Static & Dynamic Filtering for RESTful Services.........
It ignores the property for serialization & Deseraialization

Static
@JsonIgnore //applied on data variable
@JsonIgnoreProperties({"name", "phone"})   //aplied on the class , name & phone is the data variable


Dynamic
put @JsonFilter("SomeBeanFilter")  before the class name

and In controller class

@RequestMapping("/filtering")  
public MappingJacksonValue retrieveSomeBean()  
{  
SomeBean someBean=new SomeBean("Amit", "9999999999","39000");     (name,number,salary)   //It also can be a list

SimpleBeanPropertyFilter filter=SimpleBeanPropertyFilter.filterOutAllExcept("name", "salary");   //invoking static method filterOutAllExcept()  
FilterProvider filters=new SimpleFilterProvider().addFilter("SomeBeanFilter",filter);   //creating filter using FilterProvider class  

MappingJacksonValue mapping = new MappingJacksonValue(someBean);   //constructor of MappingJacksonValue class  that has bean as constructor argument  

mapping.setFilters(filters);   //configuring filters  

return mapping;  

}  


......................Topic :Versioning RESTful Web Services............
1)URI Versioning....  //Twitter uses URI versioning.
differentiate service based on the Request URI
@GetMapping("v1/person")  
@GetMapping("v2/person")  
-------
2)Versioning using Custom Request Parametr....   // Amazon uses the request parameter versioning. 
wdifferentiate service based on the Request Parameter
URI http://localhost:8080/person/param?version=1
URI http://localhost:8080/person/param?version=2

handle this in your controller
@GetMapping(value="/person/param", params="version=1")  
@GetMapping(value="/person/param", params="version=2")  
-----
3)Versioning using Request Header...... //Microsoft uses the request header versioning
we differentiate service based on the Request Header.
@GetMapping(value="/person/header", headers="X-API-Version=1")  
@GetMapping(value="/person/header", headers="X-API-Version=2")  

send in headers
key:X-API-Version  Value:1
--------

4)Versioning using Accept Header..... //Git Uses  uses the accept header versioning

@GetMapping(value="/person/produces", produces="application/vnd.company.app-v1+json")  

send in header
key:Accept value:application/vnd.company.app-v1+json

--------


........................Topic: Basic Authentication Spring.................
<dependency>  
<groupId>org.springframework.boot</groupId>  
<artifactId>spring-boot-starter-security</artifactId>  
</dependency>  

put
spring.security.user.name=root  
spring.security.user.password=root  
in application.properties file

go in auhorization tab in postman type root root
-----

OAUTH 2 via springboot.....

@EnableWebSecurity
@EnableOauth2sso     //put it on class,it specifies we are enabling oauth2


Override WebSecurityConfigureAdapter's  method configure(HttpSecurity security)

To specify to authenticate via google put some oath property in properties file

oath acccess tokenuri = "some googleauthenticateurl"
tokenName =oath_token
scope = profile , username     //tells what acces need application can provide
clientid=	public unique identifier
clientsecret =

register google cloud, login it, go in api services -> go in oauth tab->give ur app name->provide scope(information to show)
then save
create oauth client id
give url of your application from where access needed



it will give u now clientid &clientsecret id put it in you properties file

create principal for user in your controller 
and u r done :)

......................Topic : Properties File Info............ 
server.port=8090   //to set port



......................Topic : Richardson Maturity Model............

Richardson Maturity Model grades API by their RESTful maturity


.......................Topic: RestFulWebservices Best Practices..........

a.The first and last best practice is the Consumer First.

b.Use the right request method (GET, POST, PUT, and DELETE) 

c.ensure that we are sending a proper response status back.
	-When a resource is CREATED, don't send SUCCESS, send CREATED back.
	-When a ESOURCE NOT FOUND, don't send the SERVER ERROR

f.Use /users/1 not /user/1



..........................
Ques: produces and consumes in spring boot?

@RequestMapping(value = "/foo", method = RequestMethod.POST,
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE)
            
            
            
            
            
Spring jwt
https://www.springboottutorial.com/spring-boot-react-full-stack-with-spring-security-basic-and-jwt-authentication


Ques: WHat if you remove @SpingBootApplication?

Ques: How to exclude a class in spring boot application




