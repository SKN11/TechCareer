...........Topic1 : Spring..............

Ques : Why Spring? F Lw Lc
Well firstly it helps to do development faster,
reduces boilet plate code and
supports various application like JDBC,ORM,IOC,AOP,DAO,MVC,Security by predefined templates
It is a lightweight fw 
		//that means you can use its application individually as well
		for ex: you can use Spring JDBC without Spring MVC
Loose coupling //It gives good support for IoC and Dependency Injection results in loose coupling


Ques : What is IOC ? Reduces Tight coupling

Ques : But how ? IOC Container(Spring Container) responsible to inject dependency only we need to provide metadata via XML or ANootation

Ques : How many IOC Container ? //both are interfaces
Ans : Bean Factory 
	->BeanFactory factory=new XmlBeanFactory(resource);   //interface = implementation class
	->Student student=(Student)factory.getBean("studentbean");
      ApplicationContext
      	-> ApplicationContext context =new ClassPathXmlApplicationContext("applicationContext.xml");   //interface = implementation class
      	
Ques :  It is better to use ApplicationContext than BeanFactory why?
Ans : built on top of the BeanFactory interface
      simple integration with Spring's AOP,
      message resource handling (for I18N),
      event propagation,
      application layer specific context (e.g. WebApplicationContext) for web application


Ques : What is application context?
The Application Context is Spring's advanced container. Similar to BeanFactory, it can load bean definitions, wire beans together, and dispense beans upon request


Ques : Why setter based DI is better than Constructorarg ? //Partial dependency , with contrctr new bean is created so setter is lightweight & flexible

Ques :Autowiring?

use for DI, internally uses setter or contructor, only reference can be initialized with autowiring
<bean id="b" class="org.sssit.B"></bean>  
<bean id="a" class="org.sssit.A" autowire="byName"></bean>  

autowire="byName" // bean id and bean name in class A must be same ex: B b;
autowire="byType" //it will not require same bean name but bean type should be unique ex: only one B b;
autowire="constructor" //autowire by constructor
autowire="no"  //no autowiring


Ques : Factory Method in Spring?

Static FM : give its own instance , internally uses singleton pattren
Static FM which gives instance of another class
<bean id="a" class="com.javatpoint.A" factory-method="getA"></bean>  

Non Static FM which gives instance of another class
<bean id="pfactory" class="com.javatpoint.PrintableFactory"></bean>   //coz factory is now non static

<bean id="p" class="com.javatpoint.PrintableFactory" factory-method="getPrintable"  factory-bean="pfactory"></bean> 


Ques :Aspect Oriented Programming (AOP) ?  //Implemented by "Spring AspectJ AOP"

used to increase modularity by cross-cutting concerns.
A cross-cutting concern is a concern that can affect the whole application and should be centralized in one location in code as possible, such as transaction management, authentication, logging, security etc

JoinPoint : Method Executon, Spring supports only method execution join point.
Advice: what you need to do along joinpoint //@Before  , @After (before return) ,@AfterReturn (afterreturn) ,@Around @AfterThrowing
PointCut : expression language of AOP  //@Pointcut
Aspect : It is a class that contains advices, joinpoints etc.  //@Aspect
Weaving : Process of linking aspect with other application types or objects to create an advised object


Ques : Spring withORM?
Spring provides " API " to easily integrate Spring with ORM frameworks such as Hibernate, JPA(Java Persistence API) ?

Advantages :-
Less code //don't need to write such as getting the connection, starting transaction, commiting transaction, closing connection etc
Integrated transaction management
better exception handling

save() v/s persist()
1.Basic 
It stores object in database    ||    It also stores object in database

2.Return Type 
It return generated id and return type is serializable || It does not return anything. Its void return type. 

3.Transaction Boundaries 
It can save object within boundaries and outside boundaries || It can only save object within the transaction boundaries 

4.Detached Object 
It will create a new row in the table for detached object   || It will throw persistence exception for detached object 

5.Supported by 
It is only supported by Hibernate  || It is also supported by JPA

6.Real Life example
adding items in cart can be done by save || but banking payment cannot it should be under transaction


Ques : SPEL 
use to write expression within string 
also use to set value of bean object
parser.parseExpression("number").setValue(context,"5");  


...............Topic : Spring Security........................

It targets two areas 
authenticaion  //to know who is the user
authorization   //to give permission

OAuth 2.0 Login //facility to the user to login into the application by using their existing account at GitHub or Google.

===============================================================================================================================================


........Topic :Spring Boot..................

Spring Boot is a Spring module that provides the RAD (Rapid Application Development) feature to the Spring framework.























..........Rest With Spring Boot..............

Ques1:Why Representaion State Transfer?
because it provide the representation of the resource.

HTTP also defines the following standard status code:

404: RESOURCE NOT FOUND
200: SUCCESS
201: CREATED
401: UNAUTHORIZED
500: SERVER ERROR

GET: It reads a resource.
PUT: It updates an existing resource.
POST: It creates a new resource.
DELETE: It deletes the resource.

Ques2 :Can we exclude some files from autoconfiguration in spring boot ?
@SpringBootApplication (exclude={JacksonAutoConfiguration.class, JmxAutoConfiguration.class})  
spring.autoconfiguration.exclude=org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration  


Http req ----->Dispatcher Servlet
					|
				ControllerClass
					|
Http res<------	view

Ques : ResponseEntity Class
extends HttpEntity and HttpStatus class.
user can use it to know the location where his data stored in the server

Ques 3:What is ResponseEntityExceptionHandler class.
 It is an abstract and base class for the exceptions that provide centralized exception handling across all the different exception handler methods
 
 Ques 4:What is Internationalization of Restful services
 Internationalization is the process of designing web applications or services in such a way that it can provide support for various countries

Ques 5:if the date is displaying in the default timestamp format
spring.jackson.serialization.write-dates-as-timestamps=false    in application.properties file

Ques 4:What is hibernate Validator
Implemenet java Bean Validation API

Ques :What is dispatcher servlet?
It is front controller to the spring application
it passes all the reques to controller method

Ques : Jackson Jar
implememntation entity of rest fremaework

Ques :Auto configuration done by Spring Boot?

DispatcherServletAutoConfiguration (disatcherservlet)
DataSourceAutoConfiguration (hibernate)
JacksonAutoConfiguration (rest services)
ErrorMvcAutoConfiguration (#basicErrorController)

Ques WHen WhiteLabelError comes
when there is no error handling in the app . It is default error handler in spring app




..........Topic : Spring MVC Validation...............

(@Valid @ModelAttribute("emp")Employee emp,BindingResult r) in request handling method in controller

@Size(min=1,message="required") in pojo datavariable
private String pass; 

@Pattern(regexp="^[a-zA-Z0-9]{3}",message="length must be 3")  
private String pass; 

@Min(value=18, message="must be equal or greater than 18")  
@Max(value=45, message="must be equal or less than 45")  
private int age;  
	
	
CUSTOM VALIDATION 
we can create custoem validation using
public @interface CustomPassword



...........Topic : RestFul WebServices..............

What is Webservice?
It is way to communicate between two devices or network
For Ex :Java application can interact with Java, .Net, and PHP
Use:if your client uses PHP as thier technology and wants some list from you which u have written in java so with the help of webservice
it can be easily possible

What is Remote Prodedure Call or RPC
In distributed computing, a remote procedure call is when a computer program causes a procedure to execute in a different address space,
 which is coded as if it were a normal procedure call.
 
 SOAP Simple Object Access protocol
 REST Representational state Transfer
 
Ques : What is JAXWS & JAXRS?
 JAX-WS is the java API specification for SOAP web services. Implemented by RPC Style OR Document style
 JAX-RS is the java API specification for RESTful web services.  Implementor Jersey & RestEasy
 
 **** REST permits different data such as PlainText,HTML,XML,Json whereas SOAP only permits XML

What is service?
A service is a well-defined, self-contained logical function that represents a unit of functionality.
For ex: TCS tcs is a compony that provides services to their clients also interact with other Companies(other service) to get the task done







...........Annotations...

@SpringBootApplication or @EnableAutoConfiguration  //To enable Auto configuration in the webapp ex. dispatcher servlet, hibernate,jackson

@RestController //Specifies it is controller

@RequestMapping("/api") //map request
This annotation maps HTTP requests to handler methods of MVC and REST controllers


@GetMapping(path="/contact-bean/{name}") //map get request means require some info

@PostMapping //maps update info 

@RequestBody // The @RequestBody annotation maps body of the web request to the method parameter

@PathVariable //  ex : getPathVariable(@PathVariable String name->to get variable in uri also called path variable

@Requestparam? //all param after ?name='sky' ex @RequestParam("name") String name

@RequestHeader /Annotation which indicates that a method parameter should be bound to a web request header

@Configuration //Indicates that a class declares one or more @Bean methods and may be processed by the "Spring container" to generate bean 				definitions andservice requests for those beans at runtime, 
for ex: 
 @Configuration
 public class AppConfig {

     @Bean
     public MyBean myBean() {
         // instantiate, configure and return bean ...
     }
 }
 
 
 
 
 
 ............Topic 1 :Static & Dynamic Filtering for RESTful Services.........
It ignores the property for serialization & Deseraialization

Static
@JsonIgnore //applied on data variable
@JsonIgnoreProperties({"name", "phone"})   //aplied on the class , name & phone is the data variable


Dynamic
put @@JsonFilter("SomeBeanFilter")  before the class name

and

@RequestMapping("/filtering")  
public MappingJacksonValue retrieveSomeBean()  
{  
SomeBean someBean=new SomeBean("Amit", "9999999999","39000");  

SimpleBeanPropertyFilter filter=SimpleBeanPropertyFilter.filterOutAllExcept("name", "salary");   //invoking static method filterOutAllExcept()  

FilterProvider filters=new SimpleFilterProvider().addFilter("SomeBeanFilter",filter);   //creating filter using FilterProvider class  

MappingJacksonValue mapping = new MappingJacksonValue(someBean);   //constructor of MappingJacksonValue class  that has bean as constructor argument  

mapping.setFilters(filters);   //configuring filters  

return mapping;  

}  


......................Topic 2:Versioning RESTful Web Services............
URI Versioning....  //Twitter uses URI versioning.
We differentiate service based on the Request URI
@GetMapping("v1/person")  
@GetMapping("v2/person")  

Versioning using Custom Request Parametr....   // Amazon uses the request parameter versioning. 
we differentiate service based on the Request Parameter
URI http://localhost:8080/person/param?version=1
URI http://localhost:8080/person/param?version=2

handle this in your controller
@GetMapping(value="/person/param", params="version=1")  
@GetMapping(value="/person/param", params="version=2")  

Versioning using Request Header...... //Microsoft uses the request header versioning
we differentiate service based on the Request Header.
@GetMapping(value="/person/header", headers="X-API-Version=1")  
@GetMapping(value="/person/header", headers="X-API-Version=2")  

send in header 
key:X-API-Version  Value:1


Versioning using Accept Header..... //Git Uses  uses the accept header versioning

@GetMapping(value="/person/produces", produces="application/vnd.company.app-v1+json")  

send in header
key:Accept value:application/vnd.company.app-v1+json




........................Topic 3: Basic Authentication Spring.................
<dependency>  
<groupId>org.springframework.boot</groupId>  
<artifactId>spring-boot-starter-security</artifactId>  
</dependency>  

put
spring.security.user.name=root  
spring.security.user.password=root  
in application.properties file

go in auhorization tab in postman type root root

......................Topic : Richardson Maturity Model............

Richardson Maturity Model grades API by their RESTful maturity


.......................Topic: RestFulWebservices Best Practices..........

a.The first and last best practice is the Consumer First.
b.Use the right request method (GET, POST, PUT, and DELETE) 
c.ensure that we are sending a proper response status back.
d.When a resource is CREATED, don't send SUCCESS, send CREATED back.
e.When a ESOURCE NOT FOUND, don't send the SERVER ERROR
f.Use /users/1 not /user/1
