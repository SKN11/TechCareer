P:Two sum

var twoSum = function(nums, target) {
    
    let obj={};
    let res=[];
    for(let i=0;i<nums.length;i++)
        {
            let comp = target - nums[i];
            if(comp in obj)  return [obj[comp],i];
            else obj[nums[i]] =i;
        }
    return res;  //in case target not found 
};

//twoSum([-1,-2,-3,-4,-5],-8)
twoSum([2,7,11,15],9);

================================================

Javscript sorting techinique
  nums.sort((a,b)=>{return (a-b)});
    console.log(nums);
    
================================================

Problem : Three sum

var threeSum = function(nums) {
    nums.sort((a,b)=>{return (a-b)});
    //console.log(nums);
    
    var res =[];
    
    let f=nums[0];
    for(let i=0;i<nums.length;i++)
        {
            let n =nums.slice(0,i);
            if(n.includes(nums[i]))
            continue;
            //console.log(nums[i]);

            let target = 0-nums[i];
            let end = nums.length-1;
            //let start =i+1;
            for(let start=i+1;start<nums.length && start<end;)
            {
                    let n1 =nums.slice(i+1,start);
                    if(n1.includes(nums[start]))
                    start++;
                    
                    let n2 =nums.slice(start,end);
                    if(n2.includes(nums[end]))
                    end--;
                    
                
                    let sum = nums[start]+nums[end];
                    if(sum > target)    end--;
                    else if(sum < target) start++;
                    else if(sum ==target)
                        {
                        res.push([nums[i],nums[start],nums[end]]);
                        start++; end--;
                        }
             }
            
        }
    
    return res;
};


================================================

Problem: Add two linked list (LeetCode)    //LeetCode

add first nodes of both LL
find carry & sum = sum-10 , if sum>10 
add sum to LL
got to next node
assign sum to carry & carry to 0
loop till both list !== null & sum >0


================================================

Problem: remove nth element from last from singlylinkedList   //LeetCode

*two pointer approach //recommended approach
create a dummy node
connect dummy next to head
assign first & second to dummy;
incr first to n+1 times;
assing second.next to second.next.next
return dummy.next;

*json object approach
traverse through LL & store index to each to LL
if lastindex-n is 0 , head to head.next & assign arr[1].next to null;
assing lastindex - n next to lastindex-n next.next
 
==============================================
Merge two sorted Linked List
/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var mergeTwoLists = function(l1, l2) {
    let result=new ListNode(0,null);
    let res=result;
    if(!l1 || !l2) return result;
    
    let temp1=l1;
    let temp2=l2;
    
    while(temp1)
        {
            //console.log(temp1.val);
            res.next = new ListNode(temp1.val,null);
            res=res.next;
            while(temp2)
                {
                if(temp1.val===temp2.val)
                {
                    res.next = new ListNode(temp2.val,null);
                    res=res.next;
                    temp2=temp2.next;  
                }
                    else if(temp1.val>temp2.val)
                        {
                            res.next = new ListNode(temp2.val,null);
                            res=res.next;
                            temp2=temp2.next;
                        }
                   else break; 
                }
            temp1=temp1.next;
        }
    
    return result.next;
    
};

===============================================================